{
  "settings": {
    "isLogActive": true,
    "isDarkMode": true
  },
  "log": [
    {
      "type": "create item",
      "item": {
        "id": 1647929680006,
        "description": "The dialog element is now well supported by most borwsers and offers a simple and native implementation for modals",
        "title": "HTML dialog element",
        "createdAt": 1647929680006,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Good to know",
      "logDate": 1647929680362,
      "id": 1647929680362
    },
    {
      "type": "update item",
      "item": {
        "id": 1647929680006,
        "description": "The dialog element is now well supported by most borwsers and offers a simple and native implementation for modals",
        "title": "HTML dialog element",
        "createdAt": 1647929680006,
        "updatedAt": null,
        "rating": 5
      },
      "category": "Good to know",
      "logDate": 1647929682512,
      "id": 1647929682512
    },
    {
      "type": "create category",
      "item": {
        "id": 4,
        "name": "Reminders",
        "items": []
      },
      "logDate": 1647974133815,
      "id": 1647974133815
    },
    {
      "type": "create item",
      "item": {
        "id": 1647974202340,
        "description": "Create a pathway in svg with clickable markers half-randomly placed on the line.",
        "title": "SVG client pathway",
        "createdAt": 1647974202340,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Reminders",
      "logDate": 1647974202708,
      "id": 1647974202708
    },
    {
      "type": "update item",
      "item": {
        "id": 1647974202340,
        "description": "Create a pathway in svg with clickable markers half-randomly placed on the line.",
        "title": "SVG client pathway",
        "createdAt": 1647974202340,
        "updatedAt": null,
        "rating": 5
      },
      "category": "Reminders",
      "logDate": 1647974205240,
      "id": 1647974205240
    },
    {
      "type": "create item",
      "item": {
        "id": 1648143597407,
        "description": "Don't use CSS shorthands. Example: \"background-color\", and not \"background\".",
        "title": "CSS shorthands",
        "createdAt": 1648143597407,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Reminders",
      "logDate": 1648143597445,
      "id": 1648143597445
    },
    {
      "type": "update item",
      "item": {
        "id": 1648143597407,
        "description": "Don't use CSS shorthands. Example: \"background-color\", and not \"background\".",
        "title": "CSS shorthands",
        "createdAt": 1648143597407,
        "updatedAt": null,
        "rating": 3
      },
      "category": "Reminders",
      "logDate": 1648143602068,
      "id": 1648143602068
    },
    {
      "type": "create item",
      "item": {
        "id": 1648188817324,
        "description": "Add margin-box, or margin-top & bottom to the ::webkit-scrollbar-track to add top & bottom spacing on a custom scrollbar.",
        "title": "CSS scrollbar",
        "createdAt": 1648188817324,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Trick",
      "logDate": 1648188817688,
      "id": 1648188817688
    },
    {
      "type": "update item",
      "item": {
        "id": 1648188817324,
        "description": "Add margin-box, or margin-top & bottom to the ::webkit-scrollbar-track to add top & bottom spacing on a custom scrollbar.",
        "title": "CSS scrollbar",
        "createdAt": 1648188817324,
        "updatedAt": null,
        "rating": 5
      },
      "category": "Trick",
      "logDate": 1648188821177,
      "id": 1648188821177
    },
    {
      "type": "create item",
      "item": {
        "id": 1648188903006,
        "description": "Give ref to the svg container; then target its svg child to inject svg elements.\nHow to get the center point of the svg ? How to keep the injected elements on page resizing ?",
        "title": "APEXCHARTS svg injection",
        "createdAt": 1648188903006,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Reminders",
      "logDate": 1648188903359,
      "id": 1648188903359
    },
    {
      "type": "delete item",
      "item": {
        "id": 1647458052385,
        "createdAt": 1647458052385,
        "description": "Give ref to the svg container; then target its svg child to inject svg elements.\nHow to get the center point of the svg ? How to keep the injected elements on page resizing ?",
        "title": "APEXCHARTS svg injection",
        "updatedAt": null,
        "rating": 4
      },
      "category": "Trick",
      "logDate": 1648188905217,
      "id": 1648188905217
    },
    {
      "type": "update item",
      "item": {
        "id": 1648188903006,
        "description": "Give ref to the svg container; then target its svg child to inject svg elements.\nHow to get the center point of the svg ? How to keep the injected elements on page resizing ?",
        "title": "APEXCHARTS svg injection",
        "createdAt": 1648188903006,
        "updatedAt": null,
        "rating": 3
      },
      "category": "Reminders",
      "logDate": 1648188910352,
      "id": 1648188910352
    },
    {
      "type": "create item",
      "item": {
        "id": 1648237058718,
        "description": "",
        "title": "GIT merge --abort",
        "createdAt": 1648237058718,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Procedure",
      "logDate": 1648237059198,
      "id": 1648237059198
    },
    {
      "type": "update item",
      "item": {
        "id": 1648237058718,
        "description": "",
        "title": "GIT merge --abort",
        "createdAt": 1648237058718,
        "updatedAt": null,
        "rating": 5
      },
      "category": "Procedure",
      "logDate": 1648237062740,
      "id": 1648237062740
    },
    {
      "type": "update item",
      "item": {
        "id": 1648237058718,
        "description": "Last resort happy escape",
        "title": "GIT merge --abort",
        "createdAt": 1648237058718,
        "updatedAt": 1648380814252,
        "rating": 5
      },
      "category": "Procedure",
      "logDate": 1648380833301,
      "id": 1648380833301
    },
    {
      "type": "update item",
      "item": {
        "id": 1647929680006,
        "description": "The dialog element is now well supported by most borwsers and offers a simple and native implementation for modals.",
        "title": "HTML dialog element",
        "createdAt": 1647929680006,
        "updatedAt": 1648299548080,
        "rating": 3
      },
      "category": "Good to know",
      "logDate": 1648398444722,
      "id": 1648398444722
    },
    {
      "type": "update item",
      "item": {
        "id": 1647929680006,
        "description": "The dialog element is now well supported by most borwsers and offers a simple and native implementation for modals.",
        "title": "HTML dialog element",
        "createdAt": 1647929680006,
        "updatedAt": 1648299548080,
        "rating": 4
      },
      "category": "Good to know",
      "logDate": 1648398446353,
      "id": 1648398446353
    },
    {
      "type": "update item",
      "item": {
        "id": 1647929680006,
        "description": "The dialog element is now well supported by most borwsers and offers a simple and native implementation for modals.",
        "title": "HTML dialog element",
        "createdAt": 1647929680006,
        "updatedAt": 1648299548080,
        "rating": 5
      },
      "category": "Good to know",
      "logDate": 1648398447002,
      "id": 1648398447002
    },
    {
      "type": "create item",
      "item": {
        "id": 1648398508661,
        "description": "const dictionary =  {};\nobjs.forEach((obj) => {\n  if(!dictionary[obj.attr]){\n    dictionary[obj.attr] = {};  \n }\n  if(!dictionary[obj.attr][count]){\n   dictionary[obj.attr][count] = 0;\n }\ndictionary[obj.attr][count] += 1;\n});\nreturn dictionary;",
        "title": "JS function to return count of items in array in objects",
        "createdAt": 1648398508661,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Good to know",
      "logDate": 1648398509033,
      "id": 1648398509033
    },
    {
      "type": "update item",
      "item": {
        "id": 1648398508661,
        "description": "const dictionary =  {};\nobjs.forEach((obj) => {\n  if(!dictionary[obj.attr]){\n    dictionary[obj.attr] = {};  \n }\n  if(!dictionary[obj.attr][count]){\n   dictionary[obj.attr][count] = 0;\n }\ndictionary[obj.attr][count] += 1;\n});\nreturn dictionary;",
        "title": "JS function to return count of items in array in objects",
        "createdAt": 1648398508661,
        "updatedAt": null,
        "rating": 5
      },
      "category": "Good to know",
      "logDate": 1648398509974,
      "id": 1648398509974
    },
    {
      "type": "update item",
      "item": {
        "id": 1648188903006,
        "description": "Give ref to the svg container; then target its svg child to inject svg elements.\nHow to get the center point of the svg ? How to keep the injected elements on page resizing ?",
        "title": "APEXCHARTS svg injection",
        "createdAt": 1648188903006,
        "updatedAt": null,
        "rating": 5
      },
      "category": "Reminders",
      "logDate": 1648398623782,
      "id": 1648398623782
    },
    {
      "type": "create item",
      "item": {
        "id": 1648529947278,
        "description": "Add a star after the parent selector to apply uniform style to all children. Only to be applied on low level elements, as future styling for the children would require serious overriding.",
        "title": "CSS select all children",
        "createdAt": 1648529947278,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Trick",
      "logDate": 1648529947659,
      "id": 1648529947659
    },
    {
      "type": "update item",
      "item": {
        "id": 1648529947278,
        "description": "Add a star after the parent selector to apply uniform style to all children. Only to be applied on low level elements, as future styling for the children would require serious overriding.",
        "title": "CSS select all children",
        "createdAt": 1648529947278,
        "updatedAt": null,
        "rating": 1
      },
      "category": "Trick",
      "logDate": 1648529954526,
      "id": 1648529954526
    },
    {
      "type": "create item",
      "item": {
        "id": 1648576158868,
        "description": "Some elements can't be reached through scoped css. In such a case, create a wrapper class and stick css props inside. Cool to override global styling on specific items (such as elements from a UI lib for example).",
        "title": "VUE css scoping",
        "createdAt": 1648576158868,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Trick",
      "logDate": 1648576159232,
      "id": 1648576159232
    },
    {
      "type": "update item",
      "item": {
        "id": 1648576158868,
        "description": "Some elements can't be reached through scoped css. In such a case, create a wrapper class and stick css props inside. Cool to override global styling on specific items (such as elements from a UI lib for example).",
        "title": "VUE css scoping",
        "createdAt": 1648576158868,
        "updatedAt": null,
        "rating": 5
      },
      "category": "Trick",
      "logDate": 1648576163212,
      "id": 1648576163212
    },
    {
      "type": "update item",
      "item": {
        "id": 1648529947278,
        "description": "Add a star after the parent selector to apply uniform style to all children. Only to be applied on low level elements, as future styling for the children would require serious overriding. Really don't recommend doing that, but you never know when it can come handy.",
        "title": "CSS select all children",
        "createdAt": 1648529947278,
        "updatedAt": 1648576251765,
        "rating": 1
      },
      "category": "Trick",
      "logDate": 1648576281791,
      "id": 1648576281791
    },
    {
      "type": "create category",
      "item": {
        "id": 5,
        "name": "Ideas",
        "items": []
      },
      "logDate": 1648701994954,
      "id": 1648701994954
    },
    {
      "type": "create category",
      "item": {
        "id": 6,
        "name": "Practice",
        "items": []
      },
      "logDate": 1648702059696,
      "id": 1648702059696
    },
    {
      "type": "create item",
      "item": {
        "id": 1648702119904,
        "description": "Trigger an emit from a child of child ?",
        "title": "EMIT in children components",
        "createdAt": 1648702119904,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Practice",
      "logDate": 1648702120273,
      "id": 1648702120273
    },
    {
      "type": "update item",
      "item": {
        "id": 1648702119904,
        "description": "Trigger an emit from a child of child ?",
        "title": "EMIT in children components",
        "createdAt": 1648702119904,
        "updatedAt": null,
        "rating": 3
      },
      "category": "Practice",
      "logDate": 1648702127276,
      "id": 1648702127276
    },
    {
      "type": "create item",
      "item": {
        "id": 1648702283726,
        "description": "Save simple icons as svg vue files, and try to trigger a turse animation on hover of a button",
        "title": "SVG animated icons",
        "createdAt": 1648702283726,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Ideas",
      "logDate": 1648702284082,
      "id": 1648702284082
    },
    {
      "type": "update item",
      "item": {
        "id": 1648702283726,
        "description": "Save simple icons as svg vue files, and try to trigger a turse animation on hover of a button",
        "title": "SVG animated icons",
        "createdAt": 1648702283726,
        "updatedAt": null,
        "rating": 5
      },
      "category": "Ideas",
      "logDate": 1648702286425,
      "id": 1648702286425
    },
    {
      "type": "create item",
      "item": {
        "id": 1648702541622,
        "description": "Work on piling up dynamic conditional classes as an object",
        "title": "VUE dynamic classes",
        "createdAt": 1648702541622,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Practice",
      "logDate": 1648702541980,
      "id": 1648702541980
    },
    {
      "type": "update item",
      "item": {
        "id": 1648702541622,
        "description": "Work on piling up dynamic conditional classes as an object",
        "title": "VUE dynamic classes",
        "createdAt": 1648702541622,
        "updatedAt": null,
        "rating": 5
      },
      "category": "Practice",
      "logDate": 1648702545249,
      "id": 1648702545249
    },
    {
      "type": "create item",
      "item": {
        "id": 1648896340230,
        "description": "Use Vue create to init a project using CLI. Run this command to build the web component: npm run build -- --target wc --inline-vue --name <wc-name> . The name has to contain a dash.",
        "title": "VUE web component",
        "createdAt": 1648896340230,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Good to know",
      "logDate": 1648896340620,
      "id": 1648896340620
    },
    {
      "type": "update item",
      "item": {
        "id": 1648896340230,
        "description": "Use Vue create to init a project using CLI. Run this command to build the web component: npm run build -- --target wc --inline-vue --name <wc-name> . The name has to contain a dash.",
        "title": "VUE web component",
        "createdAt": 1648896340230,
        "updatedAt": null,
        "rating": 5
      },
      "category": "Good to know",
      "logDate": 1648896343947,
      "id": 1648896343947
    },
    {
      "type": "create item",
      "item": {
        "id": 1648896544094,
        "description": "Try adding Vuetify to a web component project, and to treeshake only the elements required, in order not to ship the entire library in the build.",
        "title": "VUETIFY in web component",
        "createdAt": 1648896544094,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Practice",
      "logDate": 1648896544454,
      "id": 1648896544454
    },
    {
      "type": "update item",
      "item": {
        "id": 1648896544094,
        "description": "Try adding Vuetify to a web component project, and to treeshake only the elements required, in order not to ship the entire library in the build.",
        "title": "VUETIFY in web component",
        "createdAt": 1648896544094,
        "updatedAt": null,
        "rating": 4
      },
      "category": "Practice",
      "logDate": 1648896546597,
      "id": 1648896546597
    },
    {
      "type": "delete item",
      "item": {
        "id": 1647683792112,
        "createdAt": 1647683792112,
        "description": "This mf is not a real button, and not accessible in the HTML. Its style needs to be overriden through styling the svg path. This component should be replaced with Buefy's dialog component anyway.",
        "title": "SWEET MODAL close button",
        "updatedAt": 1647760316749,
        "rating": 3
      },
      "category": "Trick",
      "logDate": 1648897279736,
      "id": 1648897279736
    },
    {
      "type": "update item",
      "item": {
        "id": 1648896544094,
        "description": "Try adding Vuetify to a web component project, and to treeshake only the elements required, in order not to ship the entire library in the build.",
        "title": "VUETIFY in web component",
        "createdAt": 1648896544094,
        "updatedAt": null,
        "rating": 5
      },
      "category": "Practice",
      "logDate": 1649012771102,
      "id": 1649012771102
    },
    {
      "type": "create item",
      "item": {
        "id": 1649012840440,
        "description": "and it really is :)",
        "title": "CSS BEM is awesome",
        "createdAt": 1649012840440,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Reminders",
      "logDate": 1649012840838,
      "id": 1649012840838
    },
    {
      "type": "update item",
      "item": {
        "id": 1649012840440,
        "description": "and it really is :)",
        "title": "CSS BEM is awesome",
        "createdAt": 1649012840440,
        "updatedAt": null,
        "rating": 5
      },
      "category": "Reminders",
      "logDate": 1649012845086,
      "id": 1649012845086
    },
    {
      "type": "create item",
      "item": {
        "id": 1647683792112,
        "createdAt": 1647683792112,
        "description": "This mf is not a real button, and not accessible in the HTML. Its style needs to be overriden through styling the svg path. This component should be replaced with Buefy's dialog component anyway.",
        "title": "SWEET MODAL close button",
        "updatedAt": 1647760316749,
        "rating": 3
      },
      "category": "Trick",
      "logDate": 1649134382677,
      "id": 1649134382677
    },
    {
      "type": "create item",
      "item": {
        "id": 1647458052385,
        "createdAt": 1647458052385,
        "description": "Give ref to the svg container; then target its svg child to inject svg elements.\nHow to get the center point of the svg ? How to keep the injected elements on page resizing ?",
        "title": "APEXCHARTS svg injection",
        "updatedAt": null,
        "rating": 4
      },
      "category": "Trick",
      "logDate": 1649135665896,
      "id": 1649135665896
    },
    {
      "type": "create item",
      "item": {
        "id": 1647683792112,
        "createdAt": 1647683792112,
        "description": "This mf is not a real button, and not accessible in the HTML. Its style needs to be overriden through styling the svg path. This component should be replaced with Buefy's dialog component anyway.",
        "title": "SWEET MODAL close button",
        "updatedAt": 1647760316749,
        "rating": 3
      },
      "category": "Trick",
      "logDate": 1649135767506,
      "id": 1649135767506
    },
    {
      "type": "create item",
      "item": {
        "id": 1649184317866,
        "description": "Force a child component to rerender after updating a prop passed to it in a parent method, using a key prop which passes a data attribute, like a step initialized at 0, which gets incremented inside the method. This incrementation will force the component to rerender.",
        "title": "VUE force component rerender",
        "createdAt": 1649184317866,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Trick",
      "logDate": 1649184318218,
      "id": 1649184318218
    },
    {
      "type": "update item",
      "item": {
        "id": 1649184317866,
        "description": "Force a child component to rerender after updating a prop passed to it in a parent method, using a key prop which passes a data attribute, like a step initialized at 0, which gets incremented inside the method. This incrementation will force the component to rerender.",
        "title": "VUE force component rerender",
        "createdAt": 1649184317866,
        "updatedAt": null,
        "rating": 5
      },
      "category": "Trick",
      "logDate": 1649184323203,
      "id": 1649184323203
    },
    {
      "type": "create item",
      "item": {
        "id": 1649267412858,
        "description": "Always go through the code at least ten times in different ways before committing",
        "title": "REVIEW code before committing",
        "createdAt": 1649267412858,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Practice",
      "logDate": 1649267413280,
      "id": 1649267413281
    },
    {
      "type": "update item",
      "item": {
        "id": 1649267412858,
        "description": "Always go through the code at least ten times in different ways before committing",
        "title": "REVIEW code before committing",
        "createdAt": 1649267412858,
        "updatedAt": null,
        "rating": 2
      },
      "category": "Practice",
      "logDate": 1649267423124,
      "id": 1649267423124
    },
    {
      "type": "create item",
      "item": {
        "id": 1649267513490,
        "description": "Create a cool web component connected to some api.",
        "title": "WEB COMPONENT",
        "createdAt": 1649267513490,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Ideas",
      "logDate": 1649267513840,
      "id": 1649267513840
    },
    {
      "type": "update item",
      "item": {
        "id": 1649267513490,
        "description": "Create a cool web component connected to some api.",
        "title": "WEB COMPONENT",
        "createdAt": 1649267513490,
        "updatedAt": null,
        "rating": 4
      },
      "category": "Ideas",
      "logDate": 1649267515828,
      "id": 1649267515828
    },
    {
      "type": "create item",
      "item": {
        "id": 1649307582607,
        "description": "Build a nice and clean css spinner. Maybe make it a web component ",
        "title": "CSS spinner",
        "createdAt": 1649307582607,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Ideas",
      "logDate": 1649307583038,
      "id": 1649307583038
    },
    {
      "type": "delete item",
      "item": {
        "id": 1649307582607,
        "description": "Build a nice and clean css spinner. Maybe make it a web component ",
        "title": "CSS spinner",
        "createdAt": 1649307582607,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Ideas",
      "logDate": 1649394662131,
      "id": 1649394662131
    },
    {
      "type": "create item",
      "item": {
        "id": 1649521736072,
        "description": "To add a line after a page try to implement inside the v-for an <hr> that is conditionned on the index being %n",
        "title": "Dashboard edit",
        "createdAt": 1649521736072,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Ideas",
      "logDate": 1649521738558,
      "id": 1649521738558
    },
    {
      "type": "update item",
      "item": {
        "id": 1649521736072,
        "description": "To add a line after a page try to implement inside the v-for an <hr> that is conditionned on the index being %n",
        "title": "Dashboard edit",
        "createdAt": 1649521736072,
        "updatedAt": null,
        "rating": 3
      },
      "category": "Ideas",
      "logDate": 1649602771485,
      "id": 1649602771485
    },
    {
      "type": "update item",
      "item": {
        "id": 1648702119904,
        "description": "Trigger an emit from a child of child ?",
        "title": "EMIT in children components",
        "createdAt": 1648702119904,
        "updatedAt": null,
        "rating": 4
      },
      "category": "Practice",
      "logDate": 1649603509311,
      "id": 1649603509311
    },
    {
      "type": "update item",
      "item": {
        "id": 1648896544094,
        "description": "Try adding Vuetify to a web component project, and to treeshake only the elements required, in order not to ship the entire library in the build.",
        "title": "VUETIFY in web component",
        "createdAt": 1648896544094,
        "updatedAt": null,
        "rating": 3
      },
      "category": "Practice",
      "logDate": 1649603514558,
      "id": 1649603514558
    },
    {
      "type": "update item",
      "item": {
        "id": 1649521736072,
        "description": "To add a line after a page try to implement inside the v-for an <hr> that is conditionned on the index being %n",
        "title": "Dashboard edit",
        "createdAt": 1649521736072,
        "updatedAt": null,
        "rating": 5
      },
      "category": "Ideas",
      "logDate": 1649739918553,
      "id": 1649739918554
    },
    {
      "type": "update item",
      "item": {
        "id": 1648896544094,
        "description": "Try adding Vuetify to a web component project, and to treeshake only the elements required, in order not to ship the entire library in the build.",
        "title": "VUETIFY in web component",
        "createdAt": 1648896544094,
        "updatedAt": null,
        "rating": 2
      },
      "category": "Practice",
      "logDate": 1649739927619,
      "id": 1649739927619
    },
    {
      "type": "create item",
      "item": {
        "id": 1649788704901,
        "description": "Don't forget to implement input validation especially before making an axios request. Just use a boolean which is the result of checking if all required fields are filled in properly",
        "title": "Input validation",
        "createdAt": 1649788704901,
        "updatedAt": null,
        "rating": 0
      },
      "category": "Reminders",
      "logDate": 1649788707295,
      "id": 1649788707295
    }
  ],
  "category": [
    {
      "id": 1,
      "name": "Procedure",
      "color": "#fcba03",
      "items": [
        {
          "description": "Git fetch is a required first step !\nGit rebase -i origin/...\nGit add\n:q!\ngit rebase --continue\ngit rebase --abort",
          "title": "GIT rebase",
          "id": 1647410078020,
          "createdAt": 1647410078020,
          "updatedAt": 1647888567722,
          "rating": 5
        },
        {
          "id": 1647457939332,
          "createdAt": 1647457939332,
          "description": "git reset <commit sha1>\nmake change, then git add; git --amend -m; git push -f ",
          "title": "GIT reset",
          "updatedAt": null,
          "rating": 5
        },
        {
          "id": 1647683690347,
          "createdAt": 1647683690347,
          "description": "Hover on the questionnaire to get form id which can be input in the url ",
          "title": "SOLR cores form id",
          "updatedAt": null,
          "rating": 4
        },
        {
          "id": 1648237058718,
          "description": "Last resort happy escape",
          "title": "GIT merge --abort",
          "createdAt": 1648237058718,
          "updatedAt": 1648380814252,
          "rating": 5
        }
      ]
    },
    {
      "id": 2,
      "name": "Trick",
      "color": "#508a27",
      "items": [
        {
          "id": 1648188817324,
          "description": "Add margin-box, or margin-top & bottom to the ::webkit-scrollbar-track to add top & bottom spacing on a custom scrollbar.",
          "title": "CSS scrollbar",
          "createdAt": 1648188817324,
          "updatedAt": null,
          "rating": 4
        },
        {
          "id": 1648529947278,
          "description": "Add a star after the parent selector to apply uniform style to all children. Only to be applied on low level elements, as future styling for the children would require serious overriding. Really don't recommend doing that, but you never know when it can come handy.",
          "title": "CSS select all children",
          "createdAt": 1648529947278,
          "updatedAt": 1648576251765,
          "rating": 1
        },
        {
          "id": 1648576158868,
          "description": "Some elements can't be reached through scoped css. In such a case, create a wrapper class and stick css props inside. Cool to override global styling on specific items (such as elements from a UI lib for example).",
          "title": "VUE css scoping",
          "createdAt": 1648576158868,
          "updatedAt": null,
          "rating": 5
        },
        {
          "id": 1647458052385,
          "createdAt": 1647458052385,
          "description": "Give ref to the svg container; then target its svg child to inject svg elements.\nHow to get the center point of the svg ? How to keep the injected elements on page resizing ?",
          "title": "APEXCHARTS svg injection",
          "updatedAt": null,
          "rating": 4
        },
        {
          "id": 1647683792112,
          "createdAt": 1647683792112,
          "description": "This mf is not a real button, and not accessible in the HTML. Its style needs to be overriden through styling the svg path. This component should be replaced with Buefy's dialog component anyway.",
          "title": "SWEET MODAL close button",
          "updatedAt": 1647760316749,
          "rating": 3
        },
        {
          "id": 1649184317866,
          "description": "Force a child component to rerender after updating a prop passed to it in a parent method, using a key prop which passes a data attribute, like a step initialized at 0, which gets incremented inside the method. This incrementation will force the component to rerender.",
          "title": "VUE force component rerender",
          "createdAt": 1649184317866,
          "updatedAt": null,
          "rating": 5
        }
      ]
    },
    {
      "id": 3,
      "name": "Good to know",
      "color": "#299190",
      "items": [
        {
          "description": "HTML can be injected into tooltips, and refer to css classes.",
          "title": "APEXCHARTS tooltips",
          "id": 1647410160011,
          "updatedAt": 1647782409588,
          "createdAt": 1647410160011,
          "rating": 4
        },
        {
          "id": 1647929680006,
          "description": "The dialog element is now well supported by most borwsers and offers a simple and native implementation for modals.",
          "title": "HTML dialog element",
          "createdAt": 1647929680006,
          "updatedAt": 1648299548080,
          "rating": 5
        },
        {
          "id": 1648398508661,
          "description": "const dictionary =  {};\nobjs.forEach((obj) => {\n  if(!dictionary[obj.attr]){\n    dictionary[obj.attr] = {};  \n }\n  if(!dictionary[obj.attr][count]){\n   dictionary[obj.attr][count] = 0;\n }\ndictionary[obj.attr][count] += 1;\n});\nreturn dictionary;",
          "title": "JS function to return count of items in array in objects",
          "createdAt": 1648398508661,
          "updatedAt": null,
          "rating": 5
        },
        {
          "id": 1648896340230,
          "description": "Use Vue create to init a project using CLI. Run this command to build the web component: npm run build -- --target wc --inline-vue --name <wc-name> . The name has to contain a dash.",
          "title": "VUE web component",
          "createdAt": 1648896340230,
          "updatedAt": null,
          "rating": 5
        }
      ]
    },
    {
      "id": 4,
      "name": "Reminders",
      "color": "#4287f5",
      "items": [
        {
          "id": 1649695320911,
          "description": "I often forget to check for empty arrays or objects which leads to blocking errors",
          "title": "Error checking",
          "createdAt": 1649695320911,
          "updatedAt": null,
          "rating": 0
        },
        {
          "id": 1649012840440,
          "description": "and it really is :)",
          "title": "CSS BEM is awesome",
          "createdAt": 1649012840440,
          "updatedAt": null,
          "rating": 5
        },
        {
          "id": 1648188903006,
          "description": "Give ref to the svg container; then target its svg child to inject svg elements.\nHow to get the center point of the svg ? How to keep the injected elements on page resizing ?",
          "title": "APEXCHARTS svg injection",
          "createdAt": 1648188903006,
          "updatedAt": null,
          "rating": 5
        },
        {
          "id": 1648143597407,
          "description": "Don't use CSS shorthands. Example: \"background-color\", and not \"background\".",
          "title": "CSS shorthands",
          "createdAt": 1648143597407,
          "updatedAt": null,
          "rating": 2
        },
        {
          "id": 1647974202340,
          "description": "Create a pathway in svg with clickable markers half-randomly placed on the line.",
          "title": "SVG client pathway",
          "createdAt": 1647974202340,
          "updatedAt": null,
          "rating": 5
        },
        {
          "id": 1649788704901,
          "description": "Don't forget to implement input validation especially before making an axios request. Just use a boolean which is the result of checking if all required fields are filled in properly",
          "title": "Input validation",
          "createdAt": 1649788704901,
          "updatedAt": null,
          "rating": 0
        }
      ]
    },
    {
      "id": 5,
      "name": "Ideas",
      "color": "#862c96",
      "items": [
        {
          "id": 1649521736072,
          "description": "To add a line after a page try to implement inside the v-for an <hr> that is conditionned on the index being %n",
          "title": "Dashboard edit",
          "createdAt": 1649521736072,
          "updatedAt": null,
          "rating": 5
        },
        {
          "id": 1649267513490,
          "description": "Create a cool web component connected to some api.",
          "title": "WEB COMPONENT",
          "createdAt": 1649267513490,
          "updatedAt": null,
          "rating": 4
        },
        {
          "id": 1648702283726,
          "description": "Save simple icons as svg vue files, and try to trigger a turse animation on hover of a button",
          "title": "SVG animated icons",
          "createdAt": 1648702283726,
          "updatedAt": null,
          "rating": 5
        }
      ]
    },
    {
      "id": 6,
      "name": "Practice",
      "color": "#E07676",
      "items": [
        {
          "id": 1649267412858,
          "description": "Always go through the code at least ten times in different ways before committing",
          "title": "REVIEW code before committing",
          "createdAt": 1649267412858,
          "updatedAt": null,
          "rating": 2
        },
        {
          "id": 1648896544094,
          "description": "Try adding Vuetify to a web component project, and to treeshake only the elements required, in order not to ship the entire library in the build.",
          "title": "VUETIFY in web component",
          "createdAt": 1648896544094,
          "updatedAt": null,
          "rating": 2
        },
        {
          "id": 1648702541622,
          "description": "Work on piling up dynamic conditional classes as an object",
          "title": "VUE dynamic classes",
          "createdAt": 1648702541622,
          "updatedAt": null,
          "rating": 5
        },
        {
          "id": 1648702119904,
          "description": "Trigger an emit from a child of child ?",
          "title": "EMIT in children components",
          "createdAt": 1648702119904,
          "updatedAt": null,
          "rating": 4
        }
      ]
    }
  ]
}